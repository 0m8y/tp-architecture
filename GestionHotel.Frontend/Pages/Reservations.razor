@page "/reservations"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@using Blazored.LocalStorage;
@inject ILocalStorageService LocalStorage
@inject AuthorizedHttpClient AuthClient

@using System.Net.Http.Json
@using GestionHotel.Frontend.Dto
@using Microsoft.AspNetCore.Components.Authorization

<h2 class="text-center my-4">Mes réservations</h2>

@if (isLoading)
{
    <div class="text-center">Chargement...</div>
}
else if (reservations == null || !reservations.Any())
{
    <div class="alert alert-info text-center">
        Vous n'avez pas encore de réservations.
    </div>
}
else
{
    <div class="container">
        @foreach (var reservation in reservations)
        {
            <div class="card mb-4 shadow-sm">
                <div class="row g-0">
                    <div class="col-md-4">
                        <img src="@GetImagePath(reservation)" class="img-fluid rounded-start" style="object-fit: cover; height: 100%;" />
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <h5 class="card-title">
                                Réservation du @reservation.StartDate.ToString("dd/MM/yyyy") au @reservation.EndDate.ToString("dd/MM/yyyy")
                            </h5>
                            <p class="card-text">
                                @($"{reservation.RoomIds.Count} chambre(s) – Statut : {reservation.Status}")
                            </p>
                            @if (!reservation.IsPaid && !reservation.Status.Contains("Cancelled"))
                            {
                                <button class="btn btn-warning" @onclick="() => GoToPayment(reservation.Id)">Payer maintenant</button>
                            }
                            else if (!reservation.Status.Contains("Cancelled"))
                            {
                                <span class="btn btn-success">Payée</span>
                            }
                            else
                            {
                                <span class="btn btn-danger">Annulée</span>
                            }
                            @if (!reservation.Status.Contains("Cancelled"))
                            {
                                <button class="btn btn-danger ms-2" @onclick="() => ShowCancelPopup(reservation)">Annuler</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (showCancelPopup && reservationToCancel != null)
{
    var now = DateTime.Now;
    var delta = (reservationToCancel.StartDate - now).TotalHours;
    var refundEligible = delta >= 48;

    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Annulation de réservation</h5>
                </div>
                <div class="modal-body">
                    <p>Voulez-vous annuler votre réservation ?</p>
                    @if (refundEligible)
                    {
                        <p class="text-success">Le montant remboursé sera de : @reservationToCancel.TotalAmount.ToString("0.00") €</p>
                    }
                    else
                    {
                        <p class="text-danger">Aucun remboursement ne sera effectué car la réservation débute dans moins de 48 heures.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showCancelPopup = false">Retour</button>
                    <button class="btn btn-danger" @onclick="ConfirmCancellation">Confirmer l’annulation</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {
    private List<ReservationDto>? reservations;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await AuthClient.InitAsync(LocalStorage);

        var response = await AuthClient.Client.GetAsync("https://localhost:7208/api/v1/bookings/my-reservations");

        if (response.IsSuccessStatusCode)
        {
            reservations = await response.Content.ReadFromJsonAsync<List<ReservationDto>>();
        }

        isLoading = false;
        }

    private string GetImagePath(ReservationDto reservation)
    {
        return reservation.RoomIds != null && reservation.RoomIds.Any()
            ? $"/rooms/{reservation.RoomIds.First()}.jpg"
            : "/img/default-room.jpg";
    }

    private void GoToPayment(Guid reservationId)
    {
        Navigation.NavigateTo($"/payment/{reservationId}");
    }

    private bool showCancelPopup = false;
    private ReservationDto? reservationToCancel;

    private void ShowCancelPopup(ReservationDto reservation)
    {
        reservationToCancel = reservation;
        showCancelPopup = true;
    }

    private async void ConfirmCancellation()
    {
        await AuthClient.InitAsync(LocalStorage);

        if (reservationToCancel is null)
            return;

        showCancelPopup = false;

        var response = await AuthClient.Client.PostAsync($"https://localhost:7208/api/v1/bookings/reservations/{reservationToCancel.Id}/cancel", null);

        reservationToCancel = null;

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Erreur lors de l'annulation : {errorContent}");
        }
    }

}
