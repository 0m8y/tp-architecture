@page "/login"
@implements IDisposable
@inject HttpClient Http

<div class="fullscreen-bg"></div>
<div class="fullscreen-overlay"></div>

<div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="login-glass p-4 rounded shadow" style="max-width: 500px; width: 100%;">
        <h3 class="text-center mb-4">Se connecter</h3>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="email" class="form-label">Adresse email</label>
                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Mot de passe</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
            </div>
            <button type="submit" class="btn-login w-100">Connexion</button>
        </EditForm>

        <p class="text-center mt-3">
            Vous n'avez pas de compte ?
            <NavLink href="/register" class="link-register">S'inscrire</NavLink>
        </p>
    </div>
</div>

@code {
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Désactive le scroll
            _ = JS.InvokeVoidAsync("document.body.classList.add", "no-scroll");
        }
    }

    public void Dispose()
    {
        // Réactive le scroll quand on quitte la page
        _ = JS.InvokeVoidAsync("document.body.classList.remove", "no-scroll");
    }

    [Inject] private IJSRuntime JS { get; set; } = default!;
}

@code {
    private LoginModel loginModel = new();

    private async void HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7208/api/v1/clients/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                // Ex : récupération du token ou redirection
                var token = await response.Content.ReadAsStringAsync();
                Console.WriteLine("Login réussi. Token : " + token);
            }
            else
            {
                Console.WriteLine("Échec de la connexion");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erreur API : " + ex.Message);
        }
    }

    public class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
